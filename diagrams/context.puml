@startuml
!includeurl https://raw.githubusercontent.com/skleanthous/C4-PlantumlSkin/master/build/output/c4.puml

title System Context Diagram for Propulsion (+Equinox)
caption High level organization of a set of Propulsion Ingesters, Reactors and Publishers as part of an overall Application

actor "Applications" <<External>> as apps

rectangle services <<External System>> [
    **Consistent Processing**
    __Equinox__
    Executing Commands
    Making Decisions
    Querying synchronously
]

database stores <<Internal>> [
    **Consistent Event Store**
    ____
    EventStore / SqlStreamStore
    MemoryStore
    CosmosDB / DynamoDB 
    (snapshots / unfolds)
]

database caches <<Internal>> [
    **Read Models**
    __(eventually consistent)__
    Document Stores 
    SQL DBs, REDIS, etc
]

together {
    rectangle ingesters <<System>> [
        **Ingesters**
        __Propulsion / FsKafka / Equinox__
        Sync from reference data
        Change Data Capture
        Event Carried State Transfer
    ]
    rectangle reactors <<System>> [
        **Reactors**
        __Propulsion / Equinox__
        Drive Reactions
        Compose Notifications
    ]
    rectangle publishers <<System>> [
        **Publishers**
        __Propulsion / FsKafka__
        Publish Simple Notifications
        Emit Composed Notifications
    ]
}

rectangle inputs <<External System>> [
    **Input Feeds**
    ____
    Topics / Buses
    ATOM feeds 
]

rectangle outputs <<External System>> [
    **Output Feeds**
    ____
    Topics / Buses
    ATOM feeds
]

apps          .> caches     : reference\neventually\nconsistent
apps       <.L.> services   : transact against /\nsynchronously query

services   <-R-> stores     : Query/Transact\n[in terms of events]

stores       --> publishers : are followed by
stores       --> reactors   : fresh\nwrites trigger

ingesters  <--   inputs     : pull external\ndata from\nupstream
ingesters    --> services   : reconcile upstream\nchanges into
ingesters   -U-> caches     : push reference data into

reactors     --> services   : manage follow-on reactions via
reactors    -U-> caches     : maintain views in
reactors      .> publishers : trigger

publishers   --> outputs    : emit notifications composed by\nreactors to
publishers   --> outputs    : render some\nevents directly to downstream

@enduml
